services:
  resource-service-db:
    image: postgres:14.0-alpine
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB_NAME}
      SPRING_PROFILE_ACTIVE: docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RESOURCE_DB_USER}"]
      interval: 5s
      timeout: 2s
      retries: 5
    volumes:
      - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mediapp-network

  song-service-db:
    image: postgres:14.0-alpine
    environment:
      POSTGRES_USER: ${SONG_DB_USER}
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
      POSTGRES_DB: ${SONG_DB_NAME}
      SPRING_PROFILE_ACTIVE: docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SONG_DB_USER}"]
      interval: 5s
      timeout: 2s
      retries: 5
    volumes:
      - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mediapp-network

  discovery-service:
    build: ./discovery-service
    ports:
      - "${DISCOVERY_SERVICE_PORT}:${DISCOVERY_SERVICE_PORT}"
    environment:
      SPRING_PROFILE_ACTIVE: docker
    networks:
      - mediapp-network

  gateway-service:
    build: ./gateway-service
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
    environment:
      SPRING_PROFILE_ACTIVE: docker
    depends_on:
      discovery-service:
        condition: service_started
    networks:
      - mediapp-network

  resource-service:
    build: ./resource-service
    ports:
      - "${RESOURCE_SERVICE_PORT}"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${RESOURCE_DB_HOST}:${RESOURCE_DB_PORT}/${RESOURCE_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${RESOURCE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${RESOURCE_DB_PASSWORD}
      SPRING_PROFILE_ACTIVE: docker
    depends_on:
      resource-service-db:
          condition: service_healthy
      discovery-service:
        condition: service_started
    networks:
      - mediapp-network

  song-service:
    build: ./song-service
    ports:
      - "${SONG_SERVICE_PORT}"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${SONG_DB_HOST}:${SONG_DB_PORT}/${SONG_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${SONG_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${SONG_DB_PASSWORD}
      SPRING_PROFILE_ACTIVE: docker
    depends_on:
      song-service-db:
        condition: service_healthy
      discovery-service:
        condition: service_started
    deploy:
      replicas: 2
    networks:
     - mediapp-network

networks:
  mediapp-network:
